#macro( parameterizedJs )
	
piggydb.namespace.import("piggydb.util.*");


##
## Constants
##
var messages = {
#foreach ($messageKey in $messages.keySet())
#if ($messageKey.startsWith("editor-"))
  "$messageKey": '$messages.get($messageKey)', 
#end
#end
  "confirm-delete-relation": '$messages.get("confirm-delete-relation")',
  "confirm-remove-tag": '$messages.get("confirm-remove-tag")',
  "confirm-remove-bookmark": '$messages.get("confirm-remove-bookmark")',
  "help": '$messages.get("help")'
};
    

##
## Initialization
##
jQuery(function() {
#if ($session.containsKey("scrollTopElement"))
  setScrollTopTo('$session.scrollTopElement');
#end

	jQuery.Autocompleter.defaults.formatItem = function(row) { 
    return escapeHtml(row[0]); 
  };
  jQuery("#searchForm_keywords").autocomplete(piggydb.server.autoCompleteUrl, {
    minChars: 1,
    selectFirst: true,
    multiple: false,
    scrollHeight: 300
  });

  prettyPrint();
  jQuery.updnWatermark.attachAll();
#if ($highlightedFragment)
  piggydb.widget.Fragment.highlight($highlightedFragment, null);
#end

#if ($user.isViewer())
	if (typeof QuickEdit != 'undefined') 
		QuickEdit.init = function(){ /* disabled */ };
#end
});


##
## Contextualized Functions
##
function showConfirmDialog(title, message, actionLabel, actionHandler) {
  var dialogContent = jQuery(jQuery("#tpl-dialog-confirm").html());
  dialogContent.attr("title", title);
  dialogContent.append(message);
  
  var buttons = {};
  buttons[actionLabel] = actionHandler;
  buttons['$messages.get("cancel")'] = function() {
    jQuery(this).dialog("close");
  };
  
  dialogContent.dialog({
    resizable: false,
    modal: true,
    width: 400,
    minHeight: 100,
    buttons: buttons
  });
	dialogContent.closest(".ui-dialog").find(".ui-dialog-buttonset button").get(0).focus();
	return dialogContent;
}

function makeFragmentsDroppable(selector, hoverClass) {
#if (!$user.isViewer())
  jQuery(selector).droppable({
    accept: function(draggable) {
      if (!draggable.hasClass("droppable-to-fragment")) return false;
      
      // check if the relation can be created
      if (draggable.hasClass("relation-draggable")) {
        var from = draggable.find(".fragment-id").text();
        var to = jQuery(this).find(".fragment-id:first").text();
        if (from == to) return false;
      }
      
      return true;
    },
    hoverClass: hoverClass != null ? hoverClass : 'fragment-drophover',
    greedy: true, 
    tolerance: 'intersect',
    drop: function(event, ui) {
      var targetId = jQuery(this).find(".fragment-id:first").text();
      
      // add a tag
      if (ui.draggable.hasClass("tag-palette-draggable")) {
        var tagId = ui.draggable.find(".tag .id").text();
        if (isNotBlank(tagId)) {
          var tags = jQuery("span.tags-placeholder-" + targetId);
          tags.empty().putLoadingIcon("margin: -2px; margin-left: 5px;");
          jQuery.get("html/add-tag.htm", {"fragmentId": targetId, "tagId": tagId}, 
            function(html) {
              tags.empty().append(jQuery(html).children("span.tags"));
              piggydb.widget.Fragment.highlight(targetId, null);
            });
        }
      }
      
      // create a relationship
      if (ui.draggable.hasClass("relation-draggable")) {
        var fromId = ui.draggable.find(".fragment-id").text();
        var fromTitle = ui.draggable.find(".fragment-title").text();
        var toTitle = jQuery(this).find(".fragment-tools .fragment-title:first").text();
        var message = jQuery(jQuery("#tpl-confirm-create-relation").html());
				message.find(".from-id").text(fromId);
				message.find(".from-title").text(fromTitle);
				message.find(".to-id").text(targetId);
				message.find(".to-title").text(toTitle);
        var dialog = showConfirmDialog(
					"$messages.get("create-relation")", 
					message.html(), 
					"$messages.get("create")", 
					function () {
						var forward = jQuery(this).find("input.forward")[0].checked;
						var backward = jQuery(this).find("input.backward")[0].checked;
					
            var fm = document.forms['createRelationForm'];
            fm.fromId.value = fromId;
            fm.toId.value = targetId;
						if (forward) fm.forward.value = "on";
						if (backward) fm.backward.value = "on";
            fm.submit();
          }
				);
      }
    }
  });
#end
}

function makeRelationsDraggable(selectorPrefix) {
#if (!$user.isViewer())
  jQuery(selectorPrefix + ".fragment-tools .relation-draggable").draggable({ 
    revert: true,
    helper: 'clone',
    appendTo: 'body',
    opacity: 0.70,
    zIndex: 120,
    cursorAt: { bottom: 2, right: 0 }
  });  
#end
}

function makeSelectedFragmentsDroppable() {
#if (!$user.isViewer())
  jQuery("#facebox-selected-fragments").droppable({
    accept: ".droppable-to-fragment",
    hoverClass: "selected-fragments-drophover",
    tolerance: 'intersect',
    drop: function(event, ui) {
      // add a tag
      if (ui.draggable.hasClass("tag-palette-draggable")) {
        var tagId = ui.draggable.find("span.tag span.id").text();
        var tagName = ui.draggable.find("span.tag a.tag").text();
        var message = "$messages.get("confirm-add-tags-to-selected")" +
          '<div class="detail">' + 
          '<span class="' + domain.miniTagIconClass(tagName) + '">&nbsp;<\/span> ' + escapeHtml(tagName) + 
          '<img class="arrow" src="$context/images/arrow-right.gif" alt="&rarr;"/>' + 
          "$messages.get("selected-fragments")<\/div>";
        showConfirmDialog("$messages.get("add-tag")", message, "$messages.get("add")", function () {
          var fm = document.forms['addTagsToSelectedForm'];
          fm.tagId.value = tagId;
          fm.submit();
        });
      }
      
      // add a relation
      if (ui.draggable.hasClass("relation-draggable")) {
        var fromId = ui.draggable.find(".fragment-id").text();
        var fromTitle = ui.draggable.find(".fragment-title").text();
        var message = "$messages.get("confirm-create-relations-to-selected")" +
          '<div class="detail">' + 
          "<strong>#" + fromId + "<\/strong> " + escapeHtml(fromTitle) + 
          '<img class="arrow" src="$context/images/arrow-right.gif" alt="&rarr;"/>' + 
          "$messages.get("selected-fragments")<\/div>";
        showConfirmDialog("$messages.get("create-relation")", message, "$messages.get("create")", function () {
          var fm = document.forms['createRelationsToSelectedForm'];
          fm.fromId.value = fromId;
          fm.submit();
        });
      }
    }
  });
#end
}
  
#end

